--------------NEXTJS--------------------

Reasons to use NextJS --
1. Waterfalling - initial rendering is slow as whenever we hit a particular link, first the CDN sends HTML Page..
		and then the JS file mentioned in script tag is sent by server.. then we do authentication and based on that client renders.. this condition is kinda waterfalling. 
		NOTE: IN REACTJS - WE MAKE BUILDS OF THE JSX FILE AND ITS WRAPPED INTO HTML FILE WHICH HAS JS FILE IN ITS SCRIPTS.. WHICH DOES OUR REACT CODE. 
2. No JS - sometimes when we want to send email as an HTML page, we are not allowed to use JS in there.. as mail providers block JS execution for security reasons. 
3. No SEO - Search engines scraps website through HTML page only and not js. 

Solution to all of this: 
----------Server side rendering - SSR - 
1. to avoid waterfalling - in SSR, the html page is first rendered on the server side and then is sent as a field HTML page to the client. 
2. low bundle size - also it can load libraries on the server side itself to reduce bundle size which is not required to be sent to the client. 
3. Direct access to backend - as backend is closer to the server it can directly query backend services to get the data hence minimizing latency issues. 
4. No need of express - as we can directly write http backend routes in nextjs app.  

Disadvantages of SSR -
1. Subsequent rendering happens on the client side only initial rendering happens on the server side. 
2. SSR doesn't understand state variables and hooks as its rendered on the server side.. it just takes the initial value set during useState declaration and wraps it into html page and then sends it to the client. 
3. SSR doesn't have access to browser objects, window objects and localStorage as this is only available on the browser side. 
4. cannot do lazy loading in ssr. 

FOR THE INITIAL RENDER IN SSR, IF WE HAVE DATA COMING FROM API, THERE WILL BE A SLIGHT DELAY UNTIL THE DATA COMES FROM SERVER.
TO REDUCE THIS, We can implement "getServerSideProps" function with export default and return the data as props in the same file which is going to be rendered on initial load. 

	export default function getServerSideProps (){
	
	const data = doAPICalling()
	return {props : {data } }
	}
	and the component can get the data in its props. now the data is fetched on server side and is rendered 

NextJS 13 - Based on the file structure in app folder, we have routes. 
/[courseId].tsx - file name can get the data of route/:courseId in  useParams hook.

use client - in nextjs 13.. 
we mention use client at the beginning of the file.. even if we are doing ssr to define what logic has to be done in the client side. 

NOTE: Always implement cookie based authentication if we have to render the data based on login and reduce the initial render time.  
